// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uL5vMT5AJCWYjUpsGbdLvv
// Component: Maxjhs214Z25

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import NavBar from "../../NavBar"; // plasmic-import: m9WqEmT8CEr_/component
import { CartProvider } from "../../medusa/CartProvider"; // plasmic-import: jOnjy9-80D8D/codeComponent
import CartItem from "../../CartItem"; // plasmic-import: aUSbAc7kaBAg/component
import Button from "../../Button"; // plasmic-import: khrEFwnXt76p/component
import Separator from "../../Separator"; // plasmic-import: TIdIDEFySHN6/component
import Footer from "../../Footer"; // plasmic-import: bqIN731zlh7x/component

import { useScreenVariants as useScreenVariantsbi7Jbp2Kb2U1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Bi7Jbp2kb2U1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: uL5vMT5AJCWYjUpsGbdLvv/projectcss
import sty from "./PlasmicCart.module.css"; // plasmic-import: Maxjhs214Z25/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: zs7Aa1MdV4FH/icon
import Secure2Icon from "./icons/PlasmicIcon__Secure2"; // plasmic-import: xxYQTuuYjVn2/icon

createPlasmicElementProxy;

export type PlasmicCart__VariantMembers = {
  empty: "empty";
};
export type PlasmicCart__VariantsArgs = {
  empty?: SingleBooleanChoiceArg<"empty">;
};
type VariantPropType = keyof PlasmicCart__VariantsArgs;
export const PlasmicCart__VariantProps = new Array<VariantPropType>("empty");

export type PlasmicCart__ArgsType = {
  slot?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCart__ArgsType;
export const PlasmicCart__ArgProps = new Array<ArgPropType>("slot", "slot3");

export type PlasmicCart__OverridesType = {
  root?: Flex__<"div">;
  navBar?: Flex__<typeof NavBar>;
  cartProvider?: Flex__<typeof CartProvider>;
  section?: Flex__<"section">;
  cartItem?: Flex__<typeof CartItem>;
  separator?: Flex__<typeof Separator>;
  svg?: Flex__<"svg">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultCartProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCart__RenderFunc(props: {
  variants: PlasmicCart__VariantsArgs;
  args: PlasmicCart__ArgsType;
  overrides: PlasmicCart__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "empty",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.empty
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbi7Jbp2Kb2U1()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicCart.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicCart.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicCart.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicCart.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicCart.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicCart.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            { [sty.rootempty]: hasVariant($state, "empty", "empty") }
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar, {
              [sty.navBarempty]: hasVariant($state, "empty", "empty")
            })}
            filled={hasVariant($state, "empty", "empty") ? true : undefined}
          />

          <CartProvider
            data-plasmic-name={"cartProvider"}
            data-plasmic-override={overrides.cartProvider}
            className={classNames("__wab_instance", sty.cartProvider)}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"section"}
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.section, {
                    [sty.sectionempty]: hasVariant($state, "empty", "empty")
                  })}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kltxW, {
                      [sty.freeBoxempty__kltxWr8RwH]: hasVariant(
                        $state,
                        "empty",
                        "empty"
                      )
                    })}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__vQzwV,
                        {
                          [sty.freeBoxempty__vQzwVr8RwH]: hasVariant(
                            $state,
                            "empty",
                            "empty"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wSn8V,
                          {
                            [sty.textempty__wSn8Vr8RwH]: hasVariant(
                              $state,
                              "empty",
                              "empty"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "empty", "empty") ? (
                          "Looks like your bag is empty"
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return `Your bag (${$ctx.cart.items.length})`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Your bag";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.cart.items;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <CartItem
                            data-plasmic-name={"cartItem"}
                            data-plasmic-override={overrides.cartItem}
                            className={classNames(
                              "__wab_instance",
                              sty.cartItem,
                              {
                                [sty.cartItemempty]: hasVariant(
                                  $state,
                                  "empty",
                                  "empty"
                                )
                              }
                            )}
                            imgUrl={currentItem.thumbnail}
                            itemQuantity={(() => {
                              try {
                                return currentItem.quantity;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 10;
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            productVariant={(() => {
                              try {
                                return currentItem.variant;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            title={currentItem.title}
                          />
                        );
                      })}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bzqCg,
                          {
                            [sty.freeBoxempty__bzqCGr8RwH]: hasVariant(
                              $state,
                              "empty",
                              "empty"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__obkL1,
                            {
                              [sty.textempty__obkL1R8RwH]: hasVariant(
                                $state,
                                "empty",
                                "empty"
                              )
                            }
                          )}
                        >
                          {
                            "If you have an account, please sign in to see items you previously added."
                          }
                        </div>
                        <Button
                          colors={"black"}
                          rounded={true}
                          size={"large"}
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___77F
                            )}
                          >
                            {"Login"}
                          </div>
                        </Button>
                        <Button
                          colors={"white"}
                          rounded={true}
                          submitsForm={true}
                        >
                          {"Continue shopping"}
                        </Button>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__e0NC5,
                        {
                          [sty.freeBoxempty__e0NC5R8RwH]: hasVariant(
                            $state,
                            "empty",
                            "empty"
                          )
                        }
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zxUl3,
                          {
                            [sty.freeBoxempty__zxUl3R8RwH]: hasVariant(
                              $state,
                              "empty",
                              "empty"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sxWhq,
                            {
                              [sty.textempty__sxWhqr8RwH]: hasVariant(
                                $state,
                                "empty",
                                "empty"
                              )
                            }
                          )}
                        >
                          {"Order Summary"}
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vol2D,
                            {
                              [sty.freeBoxempty__vol2Dr8RwH]: hasVariant(
                                $state,
                                "empty",
                                "empty"
                              )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__geBvR
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__iFb6F,
                                {
                                  [sty.freeBoxempty__iFb6Fr8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hd6Y0,
                                  {
                                    [sty.textempty__hd6Y0R8RwH]: hasVariant(
                                      $state,
                                      "empty",
                                      "empty"
                                    )
                                  }
                                )}
                              >
                                {hasVariant($state, "empty", "empty") ? (
                                  "Subtotal (1)"
                                ) : (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `Subtotal (${$ctx.cart.items.length})`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Subtotal (0)";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___8DeT,
                                {
                                  [sty.freeBoxempty___8DeTr8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__drsJ4,
                                  {
                                    [sty.textempty__drsJ4R8RwH]: hasVariant(
                                      $state,
                                      "empty",
                                      "empty"
                                    )
                                  }
                                )}
                              >
                                {hasVariant($state, "empty", "empty") ? (
                                  "$88.99"
                                ) : (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          ($ctx.cart.subtotal / 100).toFixed(2)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "$0.00";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bmuZu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zior7,
                                {
                                  [sty.textempty__zior7R8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              {"Estimated Shipping (free over $49)"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nsDnH,
                                {
                                  [sty.freeBoxempty__nsDnHr8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              {renderPlasmicSlot({
                                defaultContents: hasVariant(
                                  $state,
                                  "empty",
                                  "empty"
                                )
                                  ? "FREE"
                                  : "FREE",
                                value: args.slot,
                                className: classNames(sty.slotTargetSlot, {
                                  [sty.slotTargetSlotempty]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                })
                              })}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9FXC
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pkkJb,
                                {
                                  [sty.textempty__pkkJBr8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              {"Estimated Tax"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hyMEl,
                                {
                                  [sty.freeBoxempty__hyMElr8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vrcVh,
                                  {
                                    [sty.textempty__vrcVHr8RwH]: hasVariant(
                                      $state,
                                      "empty",
                                      "empty"
                                    )
                                  }
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "$" +
                                        (
                                          $ctx.cart.item_tax_total / 100
                                        ).toFixed(2)
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__reDah,
                              {
                                [sty.buttonempty__reDaHr8RwH]: hasVariant(
                                  $state,
                                  "empty",
                                  "empty"
                                )
                              }
                            )}
                            colors={"link"}
                            submitsForm={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2TJq
                              )}
                            >
                              {"Have a promo code?"}
                            </div>
                          </Button>
                          <Separator
                            data-plasmic-name={"separator"}
                            data-plasmic-override={overrides.separator}
                            className={classNames(
                              "__wab_instance",
                              sty.separator
                            )}
                            dark={true}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s8N1,
                              {
                                [sty.freeBoxempty__s8N1R8RwH]: hasVariant(
                                  $state,
                                  "empty",
                                  "empty"
                                )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xyU6A,
                                {
                                  [sty.textempty__xyU6Ar8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              {"Estimated Total"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tcSar,
                                {
                                  [sty.freeBoxempty__tcSarr8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__t3HQq,
                                  {
                                    [sty.textempty__t3HQQr8RwH]: hasVariant(
                                      $state,
                                      "empty",
                                      "empty"
                                    )
                                  }
                                )}
                              >
                                {hasVariant($state, "empty", "empty") ? (
                                  "$88.99"
                                ) : (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          ($ctx.cart.total / 100).toFixed(2)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "$0.00";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                          </div>
                          {(hasVariant($state, "empty", "empty") ? true : false)
                            ? renderPlasmicSlot({
                                defaultContents: (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__sd7Jx
                                    )}
                                    colors={"blue"}
                                    rounded={true}
                                    size={"large"}
                                    submitsForm={true}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__iPyMc
                                      )}
                                    >
                                      {"Checkout"}
                                    </div>
                                  </Button>
                                ),
                                value: args.slot3
                              })
                            : null}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mnFTo,
                              {
                                [sty.freeBoxempty__mnFTor8RwH]: hasVariant(
                                  $state,
                                  "empty",
                                  "empty"
                                )
                              }
                            )}
                          >
                            <Secure2Icon
                              data-plasmic-name={"svg"}
                              data-plasmic-override={overrides.svg}
                              className={classNames(projectcss.all, sty.svg)}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__y6Otn,
                                {
                                  [sty.textempty__y6Otnr8RwH]: hasVariant(
                                    $state,
                                    "empty",
                                    "empty"
                                  )
                                }
                              )}
                            >
                              {"Secure"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qPqSg,
                          {
                            [sty.freeBoxempty__qPqSgr8RwH]: hasVariant(
                              $state,
                              "empty",
                              "empty"
                            )
                          }
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ugIhm)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"48px"}
                          src={{
                            src: "/plasmic/medusa_2_3_1/images/visa.svg",
                            fullWidth: 210,
                            fullHeight: 150,
                            aspectRatio: 1.4
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nbU31)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"48px"}
                          src={{
                            src: "/plasmic/medusa_2_3_1/images/americanExpress.svg",
                            fullWidth: 210,
                            fullHeight: 150,
                            aspectRatio: 1.4
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ux4Tz)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"48px"}
                          src={{
                            src: "/plasmic/medusa_2_3_1/images/discover.svg",
                            fullWidth: 210,
                            fullHeight: 150,
                            aspectRatio: 1.4
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__cW0Vy)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"48px"}
                          src={{
                            src: "/plasmic/medusa_2_3_1/images/mastercard.svg",
                            fullWidth: 213,
                            fullHeight: 150,
                            aspectRatio: 1.416667
                          }}
                        />
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kbuM, {
                      [sty.freeBoxempty__kbuMr8RwH]: hasVariant(
                        $state,
                        "empty",
                        "empty"
                      )
                    })}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__tXz75)}
                      displayHeight={"32px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={
                        "https://www.patagonia.com/on/demandware.static/-/Library-Sites-PatagoniaShared/default/dw4b201dc8/images/for-the-planet.png"
                      }
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___05Q6)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ynJe2
                        )}
                      >
                        {
                          "1% of your purchase will go to a grassroot organization."
                        }
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ys8Cl
                        )}
                        colors={"link"}
                        submitsForm={true}
                      >
                        {"Learn more"}
                      </Button>
                    </Stack__>
                  </Stack__>
                </Stack__>
              )}
            </DataCtxReader__>
          </CartProvider>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "cartProvider",
    "section",
    "cartItem",
    "separator",
    "svg",
    "footer"
  ],
  navBar: ["navBar"],
  cartProvider: ["cartProvider", "section", "cartItem", "separator", "svg"],
  section: ["section", "cartItem", "separator", "svg"],
  cartItem: ["cartItem"],
  separator: ["separator"],
  svg: ["svg"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  cartProvider: typeof CartProvider;
  section: "section";
  cartItem: typeof CartItem;
  separator: typeof Separator;
  svg: "svg";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCart__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCart__VariantsArgs;
    args?: PlasmicCart__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCart__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCart__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCart__ArgProps,
          internalVariantPropNames: PlasmicCart__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCart__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCart";
  } else {
    func.displayName = `PlasmicCart.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uL5vMT5AJCWYjUpsGbdLvv"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCart = Object.assign(
  // Top-level PlasmicCart renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    cartProvider: makeNodeComponent("cartProvider"),
    section: makeNodeComponent("section"),
    cartItem: makeNodeComponent("cartItem"),
    separator: makeNodeComponent("separator"),
    svg: makeNodeComponent("svg"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCart
    internalVariantProps: PlasmicCart__VariantProps,
    internalArgProps: PlasmicCart__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Shopping Cart",
      description:
        "Congue pulvinar scelerisque vestibulum senectus ullamcorper ac sem justo odio adipiscing volutpat nam a amet quam facilisi parturient parturient et id parturient per.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCart;
/* prettier-ignore-end */
