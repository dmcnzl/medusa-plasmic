// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uL5vMT5AJCWYjUpsGbdLvv
// Component: yBdKikuDaikx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import NavBar from "../../NavBar"; // plasmic-import: m9WqEmT8CEr_/component
import Button from "../../Button"; // plasmic-import: khrEFwnXt76p/component
import { ProductCollection } from "../../medusa/ProductCollection"; // plasmic-import: KoaVoQq-xWQ5/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: -VhJ5zkOF9d9/component
import Rating from "../../Rating"; // plasmic-import: 2_DObjAL-2sU/component
import EmojiValueProps from "../../EmojiValueProps"; // plasmic-import: DjICPhijXdsH/component
import Value from "../../Value"; // plasmic-import: 5DSDxhDBXnn2/component
import { CategoryCollection } from "../../medusa/CategoryCollection"; // plasmic-import: lnnlZVnjGveT/codeComponent
import Footer from "../../Footer"; // plasmic-import: bqIN731zlh7x/component

import { useScreenVariants as useScreenVariantsbi7Jbp2Kb2U1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Bi7Jbp2kb2U1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: uL5vMT5AJCWYjUpsGbdLvv/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: yBdKikuDaikx/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: zs7Aa1MdV4FH/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: kaodqK7Yrv1K/icon
import PlaneIcon from "./icons/PlasmicIcon__Plane"; // plasmic-import: VdH7teNCLwXa/icon
import DocumentIcon from "./icons/PlasmicIcon__Document"; // plasmic-import: 62j0hu0Sj0YZ/icon
import LockIcon from "./icons/PlasmicIcon__Lock"; // plasmic-import: zIYEkuF-OYiJ/icon
import SpeakerphoneIcon from "./icons/PlasmicIcon__Speakerphone"; // plasmic-import: gMi3Q7re8Spm/icon
import MedalIcon from "./icons/PlasmicIcon__Medal"; // plasmic-import: NkMefwHRscy7/icon
import LeafIcon from "./icons/PlasmicIcon__Leaf"; // plasmic-import: Fm1uYdbIm6Fe/icon
import ShoeIcon from "./icons/PlasmicIcon__Shoe"; // plasmic-import: ZqYy6HrOsXhX/icon
import PeaceIcon from "./icons/PlasmicIcon__Peace"; // plasmic-import: RBOyQUBe3-T2/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  container42?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("container42");

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navBar?: Flex__<typeof NavBar>;
  container3?: Flex__<"div">;
  h1?: Flex__<"h1">;
  container4?: Flex__<"div">;
  rating?: Flex__<typeof Rating>;
  emojiValueProps?: Flex__<typeof EmojiValueProps>;
  columns?: Flex__<"div">;
  container42?: Flex__<"div">;
  container5?: Flex__<"div">;
  container6?: Flex__<"div">;
  categoryCollection?: Flex__<typeof CategoryCollection>;
  container434?: Flex__<"div">;
  container433?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedCategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbi7Jbp2Kb2U1()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section className={classNames(projectcss.all, sty.section___24Sx1)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"container3"}
              data-plasmic-override={overrides.container3}
              hasGap={true}
              className={classNames(projectcss.all, sty.container3)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__y2BI2)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__loYkm)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"New collection!22"}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zhzwT
                    )}
                  >
                    {
                      "A nam quisque orci ut vestibulum eget sem aliquet a dictumst condimentum ad quam porta a inceptos consectetur sagittis a a commodo ridiculus tempor egestas."
                    }
                  </div>
                </Stack__>
                <Button
                  className={classNames("__wab_instance", sty.button__vRvWx)}
                  colors={"black"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__idqDg)}
                      role={"img"}
                    />
                  }
                  link={`/category`}
                  rounded={true}
                  showEndIcon={true}
                  size={"large"}
                  submitsForm={true}
                >
                  {"Shop"}
                </Button>
              </Stack__>
            </Stack__>
          </section>
          <section className={classNames(projectcss.all, sty.section__uOwlN)}>
            <div
              data-plasmic-name={"container4"}
              data-plasmic-override={overrides.container4}
              className={classNames(projectcss.all, sty.container4)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___8DvJd)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bjIa1
                  )}
                >
                  {"Featured"}
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__wnAmp)}
                  colors={"link"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__vz2Ut)}
                      role={"img"}
                    />
                  }
                  link={`/category`}
                  showEndIcon={true}
                  submitsForm={true}
                >
                  {"See more"}
                </Button>
              </div>
            </div>
            <ProductCollection
              className={classNames(
                "__wab_instance",
                sty.productCollection__xnezr
              )}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sciXf
                      )}
                    >
                      {"No product found!"}
                    </div>
                  )}
                </DataCtxReader__>
              }
              limit={6}
              loadingMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kttn
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              noAutoRepeat={true}
              noLayout={true}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zvhA)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.products;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lgfDb
                          )}
                          key={currentIndex}
                        >
                          <ProductCard
                            className={classNames(
                              "__wab_instance",
                              sty.productCard__iZOx
                            )}
                            imgUrl={currentItem.thumbnail}
                            isSignedIn={(() => {
                              try {
                                return !!$ctx.customer;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()}
                            link={`/product/${(() => {
                              try {
                                return currentItem.handle;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`}
                            price={currentItem.price.original_price_amount}
                            rating={
                              <Rating
                                data-plasmic-name={"rating"}
                                data-plasmic-override={overrides.rating}
                                className={classNames(
                                  "__wab_instance",
                                  sty.rating
                                )}
                                rating={"threeHalf"}
                              />
                            }
                            tags={
                              <Button
                                colors={"lightGray"}
                                size={"small"}
                                submitsForm={true}
                              >
                                {"New"}
                              </Button>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c7Eo
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Product name";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__g10KZ
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.description;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "If you can dream it, you can build it.";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </ProductCard>
                        </div>
                      );
                    })}
                  </div>
                )}
              </DataCtxReader__>
            </ProductCollection>
            <div className={classNames(projectcss.all, sty.freeBox__xSv41)} />
          </section>
          <section className={classNames(projectcss.all, sty.section___7Bqno)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__p0Lny)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lsv8L)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3DCzE)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pqmqg
                    )}
                  >
                    {"Our best shoe sale of the year"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Bk2X
                    )}
                  >
                    {
                      "Signature style. Unsurpassed quality and comfort. Now\u2019s the perfect time to save on iconic shoes."
                    }
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__a80H6)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mijt0
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"3 "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"for"}
                      </span>
                      <React.Fragment>{" $169"}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <Button
                    colors={"black"}
                    endIcon={
                      <RightArrowIcon
                        className={classNames(projectcss.all, sty.svg__lwhao)}
                        role={"img"}
                      />
                    }
                    link={`/category`}
                    rounded={true}
                    showEndIcon={true}
                    size={"large"}
                    submitsForm={true}
                  >
                    {"Shop sale"}
                  </Button>
                </Stack__>
              </Stack__>
            </Stack__>
          </section>
          <EmojiValueProps
            data-plasmic-name={"emojiValueProps"}
            data-plasmic-override={overrides.emojiValueProps}
            className={classNames("__wab_instance", sty.emojiValueProps)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__nOyrN)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__fbeHx
                      )}
                      colors={"black"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__mP0VD)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large"}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__tM8Tl)}
                  icon={
                    <PlaneIcon
                      className={classNames(projectcss.all, sty.svg__gcQte)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sCblV
                    )}
                  >
                    {"Worldwide shipping"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uFe9C
                    )}
                  >
                    {"Special financing and earn rewards."}
                  </div>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__t3IaE)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__nusQ4
                      )}
                      colors={"black"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__y21Xw)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large"}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__bbr2)}
                  icon={
                    <DocumentIcon
                      className={classNames(projectcss.all, sty.svg__v3Q9T)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fhQjw
                    )}
                  >
                    {"30-day guarantee"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__woC76
                    )}
                  >
                    {"Free return policy."}
                  </div>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column___9XUvv)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___9Z6Pa
                      )}
                      colors={"black"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__lLWz)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large"}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__dCbHh)}
                  icon={
                    <LockIcon
                      className={classNames(projectcss.all, sty.svg__ff7Kk)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Pof4
                    )}
                  >
                    {"Secured payments"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Vxza
                    )}
                  >
                    {"We accept major credit cards."}
                  </div>
                </Value>
              </div>
            </Stack__>
          </EmojiValueProps>
          <section className={classNames(projectcss.all, sty.section__n9OP)}>
            <div
              data-plasmic-name={"container42"}
              data-plasmic-override={overrides.container42}
              className={classNames(projectcss.all, sty.container42)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xc2Sl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j8HPo
                      )}
                    >
                      {"Just added"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___7HYb9
                      )}
                      colors={"link"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__rqSvg)}
                          role={"img"}
                        />
                      }
                      link={`/category`}
                      showEndIcon={true}
                      submitsForm={true}
                    >
                      {"See more"}
                    </Button>
                  </div>
                ),

                value: args.container42
              })}
            </div>
            <div
              data-plasmic-name={"container5"}
              data-plasmic-override={overrides.container5}
              className={classNames(projectcss.all, sty.container5)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wBTR)}
              >
                <ProductCollection
                  className={classNames(
                    "__wab_instance",
                    sty.productCollection__lGKp8
                  )}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eBsZy
                          )}
                        >
                          {"No product found!"}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__he3IH
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={true}
                  noLayout={true}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.products;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <ProductCard
                            imgUrl={currentItem.thumbnail}
                            key={currentIndex}
                            link={`/product/${(() => {
                              try {
                                return currentItem.handle;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`}
                            tags={
                              <Button
                                colors={"lightGray"}
                                size={"small"}
                                submitsForm={true}
                              >
                                {"New"}
                              </Button>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iedLg
                              )}
                            >
                              <React.Fragment>
                                {currentItem.title}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dYbVb
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.description;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "If you can dream it, you can build it.";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </ProductCard>
                        );
                      })
                    }
                  </DataCtxReader__>
                </ProductCollection>
              </Stack__>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section___5Eg8R)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"container6"}
              data-plasmic-override={overrides.container6}
              hasGap={true}
              className={classNames(projectcss.all, sty.container6)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xouPo)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xEQd
                  )}
                >
                  {"Categories"}
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__o4Gar)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSelectedCategory"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedCategory"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedCategory"] != null &&
                      typeof $steps["updateSelectedCategory"] === "object" &&
                      typeof $steps["updateSelectedCategory"].then ===
                        "function"
                    ) {
                      $steps["updateSelectedCategory"] = await $steps[
                        "updateSelectedCategory"
                      ];
                    }
                  }}
                  states={(() => {
                    try {
                      return !$state.selectedCategory ? "active" : undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "active";
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__awWGm
                    )}
                  >
                    {"All"}
                  </div>
                </Button>
                <CategoryCollection
                  data-plasmic-name={"categoryCollection"}
                  data-plasmic-override={overrides.categoryCollection}
                  className={classNames(
                    "__wab_instance",
                    sty.categoryCollection
                  )}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q2Hy
                          )}
                        >
                          {"No product found!"}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gl1Ct
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.categories;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___7EZ3N
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateSelectedCategory"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["selectedCategory"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSelectedCategory"] != null &&
                                typeof $steps["updateSelectedCategory"] ===
                                  "object" &&
                                typeof $steps["updateSelectedCategory"].then ===
                                  "function"
                              ) {
                                $steps["updateSelectedCategory"] = await $steps[
                                  "updateSelectedCategory"
                                ];
                              }
                            }}
                            states={(() => {
                              try {
                                return currentItem.id ===
                                  $state.selectedCategory
                                  ? "active"
                                  : undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            submitsForm={true}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "New";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </Button>
                        );
                      })
                    }
                  </DataCtxReader__>
                </CategoryCollection>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kKoUe)}
              >
                <ProductCollection
                  category={(() => {
                    try {
                      return $state.selectedCategory;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.productCollection___7YwwZ
                  )}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xgIrs
                          )}
                        >
                          {"No product found!"}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___41BNa
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noLayout={true}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.products;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <ProductCard
                            className={classNames(
                              "__wab_instance",
                              sty.productCard___0ZEuF
                            )}
                            imgUrl={currentItem.thumbnail}
                            key={currentIndex}
                            link={`/product/${(() => {
                              try {
                                return currentItem.handle;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`}
                            small={true}
                          />
                        );
                      })
                    }
                  </DataCtxReader__>
                </ProductCollection>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__kuEiq)}>
                <ProductCollection
                  category={(() => {
                    try {
                      return $state.selectedCategory;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.productCollection__e1ALb
                  )}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1HbAy
                          )}
                        >
                          {"No product found!"}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zwbo1
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={true}
                  noLayout={true}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.products;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <ProductCard
                            className={classNames(
                              "__wab_instance",
                              sty.productCard___8XoCi
                            )}
                            imgUrl={currentItem.thumbnail}
                            key={currentIndex}
                            link={`/product/${(() => {
                              try {
                                return currentItem.handle;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`}
                            small={true}
                          />
                        );
                      })
                    }
                  </DataCtxReader__>
                </ProductCollection>
              </div>
            </Stack__>
          </section>
          <section className={classNames(projectcss.all, sty.section__bCoTf)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"container434"}
              data-plasmic-override={overrides.container434}
              hasGap={true}
              className={classNames(projectcss.all, sty.container434)}
            >
              <Value
                center={true}
                children2={
                  <Button
                    className={classNames("__wab_instance", sty.button__byHam)}
                    colors={"black"}
                    endIcon={
                      <RightArrowIcon
                        className={classNames(projectcss.all, sty.svg__lyTsg)}
                        role={"img"}
                      />
                    }
                    rounded={true}
                    showEndIcon={true}
                    submitsForm={true}
                  >
                    {"Read our letter"}
                  </Button>
                }
                className={classNames("__wab_instance", sty.value__s01TJ)}
                icon={
                  <SpeakerphoneIcon
                    className={classNames(projectcss.all, sty.svg__h2QO)}
                    role={"img"}
                  />
                }
                topBottom={true}
                withButton={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6XRJ
                  )}
                >
                  {"Our goals"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1ZiTc
                  )}
                >
                  {"We\u2019re learning how to become a new kind of company."}
                </div>
              </Value>
            </Stack__>
          </section>
          <section className={classNames(projectcss.all, sty.section__n5TZr)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"container433"}
              data-plasmic-override={overrides.container433}
              hasGap={true}
              className={classNames(projectcss.all, sty.container433)}
            >
              <div className={classNames(projectcss.all, sty.column__aCUoh)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__agsTc
                      )}
                      colors={"black"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__yKiAl)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large"}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__cxue)}
                  icon={
                    <MedalIcon
                      className={classNames(projectcss.all, sty.svg__ju7Hz)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1UfId
                    )}
                  >
                    {"We guarantee everything we sell."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vQlXz
                    )}
                  >
                    {
                      "Ad fringilla ut nisi in hendrerit malesuada nascetur a in ridiculus."
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__xxpsK)}
                    colors={"link"}
                    submitsForm={true}
                  >
                    {"View guarantee"}
                  </Button>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__zRi4J)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___1BscX
                      )}
                      colors={"black"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__lmtv1)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large"}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value___3G9Hh)}
                  icon={
                    <LeafIcon
                      className={classNames(projectcss.all, sty.svg___61Ls)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ncUIs
                    )}
                  >
                    {"Know how your shoes are made."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yBUzB
                    )}
                  >
                    {
                      "Parturient blandit viverra blandit sem suspendisse himenaeos."
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__cf239)}
                    colors={"link"}
                    submitsForm={true}
                  >
                    {"About the supply chain"}
                  </Button>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__smo6C)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__c81RN
                      )}
                      colors={"black"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__heN7)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large"}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__qUBsl)}
                  icon={
                    <ShoeIcon
                      className={classNames(projectcss.all, sty.svg__gwIl2)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aw8MM
                    )}
                  >
                    {"Keep your shoes in play."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6WKja
                    )}
                  >
                    {
                      "Adipiscing ornare dui tellus nam nibh cum a torquent maecenas."
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__zcR6N)}
                    colors={"link"}
                    submitsForm={true}
                  >
                    {"Keep your shoes in play"}
                  </Button>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__t6Ka2)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__aezr5
                      )}
                      colors={"black"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__j8FpF)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large"}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__dE1KB)}
                  icon={
                    <PeaceIcon
                      className={classNames(projectcss.all, sty.svg__y3Qck)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w8QHa
                    )}
                  >
                    {"We give back for every sale."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r59BU
                    )}
                  >
                    {
                      "Parturient vestibulum ut a dui parturient habitant netus integer ipsum."
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__yQlMe)}
                    colors={"link"}
                    submitsForm={true}
                  >
                    {"Give back for every sale"}
                  </Button>
                </Value>
              </div>
            </Stack__>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "container3",
    "h1",
    "container4",
    "rating",
    "emojiValueProps",
    "columns",
    "container42",
    "container5",
    "container6",
    "categoryCollection",
    "container434",
    "container433",
    "footer"
  ],

  navBar: ["navBar"],
  container3: ["container3", "h1"],
  h1: ["h1"],
  container4: ["container4"],
  rating: ["rating"],
  emojiValueProps: ["emojiValueProps", "columns"],
  columns: ["columns"],
  container42: ["container42"],
  container5: ["container5"],
  container6: ["container6", "categoryCollection"],
  categoryCollection: ["categoryCollection"],
  container434: ["container434"],
  container433: ["container433"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  container3: "div";
  h1: "h1";
  container4: "div";
  rating: typeof Rating;
  emojiValueProps: typeof EmojiValueProps;
  columns: "div";
  container42: "div";
  container5: "div";
  container6: "div";
  categoryCollection: typeof CategoryCollection;
  container434: "div";
  container433: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uL5vMT5AJCWYjUpsGbdLvv"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    container3: makeNodeComponent("container3"),
    h1: makeNodeComponent("h1"),
    container4: makeNodeComponent("container4"),
    rating: makeNodeComponent("rating"),
    emojiValueProps: makeNodeComponent("emojiValueProps"),
    columns: makeNodeComponent("columns"),
    container42: makeNodeComponent("container42"),
    container5: makeNodeComponent("container5"),
    container6: makeNodeComponent("container6"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    container434: makeNodeComponent("container434"),
    container433: makeNodeComponent("container433"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "ShoeShop",
      description:
        "Ad ullamcorper eros nibh pharetra vulputate imperdiet consectetur vestibulum at ac posuere volutpat maecenas gravida dictum suscipit habitasse class scelerisque fermentum blandit mi a.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
